import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Car Appraisal System",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def estimate_price_basic(marka, model, year, probeg, engine_volume, condition):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏"""
    base_prices = {
        'Toyota': 1, 'BMW': 1, 'Mercedes': 1,
        'Audi': 1, 'Volkswagen': 1, 'Lada': 1,
        'Kia': 1, 'Hyundai': 1, 'default': 1
    }
    
    base_price = base_prices.get(marka, base_prices['default'])
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    year_mod = (year - 2000) * 15000
    probeg_mod = -probeg * 0.5
    engine_mod = engine_volume * 50000
    
    condition_mod = {
        '–û—Ç–ª–∏—á–Ω–æ–µ': 1.2,
        '–•–æ—Ä–æ—à–µ–µ': 1.0,
        '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ': 0.8,
        '–ü–ª–æ—Ö–æ–µ': 0.6
    }.get(condition, 1.0)
    
    price = (base_price + year_mod + probeg_mod + engine_mod) * condition_mod
    return max(price, 100000)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'page' not in st.session_state:
    st.session_state.page = 'main'
if 'car_data' not in st.session_state:
    st.session_state.car_data = {}
if 'history' not in st.session_state:
    st.session_state.history = []

# –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def go_to_page(page_name):
    st.session_state.page = page_name
    if page_name != 'history':
        st.session_state.history.append(page_name)

def go_back():
    if len(st.session_state.history) > 1:
        st.session_state.history.pop()
        st.session_state.page = st.session_state.history[-1]
    else:
        st.session_state.page = 'main'

def go_home():
    st.session_state.page = 'main'
    st.session_state.history = ['main']

# –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def render_navigation():
    col1, col2= st.columns([1, 1])
    
    with col1:
        if st.button("üè† –ì–ª–∞–≤–Ω–∞—è", use_container_width=True):
            go_home()
    
    with col2:
        if st.button("üìã –ò—Å—Ç–æ—Ä–∏—è", use_container_width=True):
            go_to_page('history')


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def main_page():
    st.title("üöó –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.header("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        
        st.session_state.car_data['marka'] = st.selectbox(
            "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            ['Toyota', 'BMW', 'Mercedes', 'Audi', 'Volkswagen', 'Lada', 'Kia', 'Hyundai']
        )
        
        st.session_state.car_data['model'] = st.text_input("–ú–æ–¥–µ–ª—å", "Camry")
        
        st.session_state.car_data['year'] = st.slider(
            "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 
            min_value=1990, 
            max_value=2024, 
            value=2018
        )
        
        st.session_state.car_data['probeg'] = st.number_input(
            "–ü—Ä–æ–±–µ–≥ (–∫–º)", 
            min_value=0, 
            max_value=1000000, 
            value=50000
        )
    
    with col2:
        st.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        st.session_state.car_data['engine_volume'] = st.slider(
            "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)",
            min_value=0.5,
            max_value=6.0,
            value=2.0,
            step=0.1
        )
        
        st.session_state.car_data['condition'] = st.selectbox(
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
            ["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–ª–æ—Ö–æ–µ"]
        )
        
        st.session_state.car_data['transmission'] = st.radio(
            "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á",
            ["–ê–≤—Ç–æ–º–∞—Ç", "–ú–µ—Ö–∞–Ω–∏–∫–∞", "–†–æ–±–æ—Ç", "–í–∞—Ä–∏–∞—Ç–æ—Ä"]
        )
        
        st.session_state.car_data['fuel_type'] = st.selectbox(
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞",
            ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∏–±—Ä–∏–¥", "–≠–ª–µ–∫—Ç—Ä–æ"]
        )
    
    if st.button("üéØ –û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", type="primary", use_container_width=True):
        price = estimate_price_basic(
            st.session_state.car_data['marka'],
            st.session_state.car_data['model'],
            st.session_state.car_data['year'],
            st.session_state.car_data['probeg'],
            st.session_state.car_data['engine_volume'],
            st.session_state.car_data['condition']
        )
        
        st.success(f"### –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} ‚ÇΩ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        appraisal_data = {
            **st.session_state.car_data,
            'price': price,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        st.session_state.history_data = st.session_state.get('history_data', [])
        st.session_state.history_data.append(appraisal_data)


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
def history_page():
    st.title("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫")
    st.markdown("---")
    
    if 'history_data' not in st.session_state or not st.session_state.history_data:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø—É—Å—Ç–∞")
        return
    
    history_df = pd.DataFrame(st.session_state.history_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏")
    for i, row in enumerate(reversed(history_df.to_dict('records')[:5])):
        with st.expander(f"{row['marka']} {row['model']} - {row['price']:,.0f} ‚ÇΩ"):
            st.write(f"**–ì–æ–¥:** {row['year']}")
            st.write(f"**–ü—Ä–æ–±–µ–≥:** {row['probeg']:,.0f} –∫–º")
            st.write(f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {row['condition']}")
            st.write(f"**–í—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏:** {row['timestamp']}")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏
    if len(history_df) > 1:
        st.markdown("---")
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫")
        
        history_df['timestamp_dt'] = pd.to_datetime(history_df['timestamp'])
        fig = px.line(history_df, x='timestamp_dt', y='price', 
                     title='–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
        st.plotly_chart(fig, use_container_width=True)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
def main():
    render_navigation()
    st.markdown("---")
    
    if st.session_state.page == 'main':
        main_page()
    elif st.session_state.page == 'history':
        history_page()

if __name__ == "__main__":
    main()